---
import Layout from "../layouts/Layout.astro";
import BackHome from "@components/BackHome.astro";



---

<Layout title="Edit profile">
 <div class="flex items-center">
  <BackHome/>
  <p class="text-2xl font-bold text-white mx-3">Edit profile</p>
  </div> 

  <div class="flex flex-col items-center justify-center text-gray-50 my-2">
    <div class="flex items-center justify-center container mx-auto px-4">
    <label for="photo" class="flex flex-col items-center justify-center w-full h-64  border-dashed rounded-lg cursor-pointer dark:hover:bg-bray-800 bg-gray-700 bg-gray-100 border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
        <div class="flex flex-col items-center justify-center pt-5 pb-6">
            <svg class="w-8 h-8 mb-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"/>
            </svg>
            <p class="mb-2 text-sm text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
            <p class="text-xs text-gray-400">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
        </div>
        <input type="file" class="hidden" id="photo" name="mainimage" accept="image/*" />
    </label>
</div> 
   <img id="demo" width="200px" height="200px" class="rounded hidden">
   <div class="w-72 my-2 border-b border-gray-600"></div>
   <h1 class="text-2xl text-gray-300 my-4 font-semibold">Change Your Name</h1>
   <input type="text" class="bg-gray-800 border border-gray-700 text-gray-50 rounded-lg my-3 px-6" id="fullname" placeholder="Enter Your Name">
   <button id="save" class="bg-blue-600 border  border-blue-600 text-gray-50 rounded-xl py-2 px-7">Save Changes</button>
   <p id="toast" class="text-sm text-emerald-500 hidden py-4">Saving Changes...</p>
  </div>
  
 
</Layout>


<script>
import { app } from "../lib/firebase/client";
import { getFirestore, doc, updateDoc } from "firebase/firestore";
const db = getFirestore(app)
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";

const storage = getStorage(app);
const uid=localStorage.getItem("storeId")
let file;
var newName = document.getElementById("fullname")

document.getElementById("photo").addEventListener('change', ()=>{
  file = document.getElementById("photo").files[0]
  console.log(file)
  document.getElementById("demo").classList.remove('hidden')
  document.getElementById("demo").src= URL.createObjectURL(file)
})
document.getElementById("demo").classList.add('hidden')
document.getElementById("toast").classList.add('hidden')

//Save Changes 

document.getElementById("save").addEventListener('click', async ()=>{
document.getElementById("toast").classList.remove('hidden')
const storageRef = ref(storage, '/images/' + file.name);
const uploadTask = uploadBytesResumable(storageRef, file);

// Listen for state changes, errors, and completion of the upload.
uploadTask.on('state_changed',
  (snapshot) => {
    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
    console.log('Upload is ' + progress + '% done');
    switch (snapshot.state) {
      case 'paused':
        console.log('Upload is paused');
        break;
      case 'running':
        console.log('Upload is running');
        break;
    }
  }, 
  (error) => {
    // A full list of error codes is available at
    // https://firebase.google.com/docs/storage/web/handle-errors
    switch (error.code) {
      case 'storage/unauthorized':
        // User doesn't have permission to access the object
        break;
      case 'storage/canceled':
        // User canceled the upload
        break;

      // ...

      case 'storage/unknown':
        // Unknown error occurred, inspect error.serverResponse
        break;
    }
  }, 
  () => {
    // Upload completed successfully, now we can get the download URL
    getDownloadURL(uploadTask.snapshot.ref).then( async (downloadURL) => {
      const profilePicRef = doc(db, "users", uid );
      await updateDoc(profilePicRef, {
      picture: downloadURL,
      name: newName.value
});
     window.location.href="/dashboard"
    });
  }
); 


})

</script>
