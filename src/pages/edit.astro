---
import Layout from "../layouts/Layout.astro";
import BackHome from "@components/BackHome.astro";



---

<Layout title="Edit profile">
 <div class="flex items-center">
  <BackHome/>
  <p class="text-2xl font-bold text-white mx-3">Edit profile</p>
  </div> 

  <div class="flex flex-col items-center justify-center text-gray-50 my-2">
    <div>
    <label for="photo" class="flex flex-col items-center w-full max-w-lg p-5 mx-auto mt-2 text-center  border-2  border-dashed cursor-pointer bg-gray-900 border-gray-700 rounded-xl">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8 text-gray-400">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z" />
        </svg>

        <h2 class="mt-1 font-medium tracking-wide text-gray-200">Profile Image</h2>

        <p class="mt-2 text-xs tracking-wide text-gray-400">Upload or darg & drop your file SVG, PNG, JPG or GIF. </p>

        <input accept="image/*" id="photo" type="file" class="hidden" />
    </label>
</div>
   <img id="demo" width="200px" height="200px" class="my-3 rounded hidden">
   <div class="w-72 my-2 border-b border-gray-600"></div>
   <h1 class="text-2xl text-gray-300 my-4 font-semibold">Change Your Name</h1>
   <input type="text" class="bg-gray-800 border border-gray-700 text-gray-50 rounded-lg my-3 px-6" id="fullname" placeholder="Enter Your Name">
   <button id="save" class="bg-blue-600 border  border-blue-600 text-gray-50 rounded-xl py-2 px-7">Save Changes</button>
   <p id="toast" class="text-sm text-emerald-500 hidden py-4">Saving Changes...</p>
  </div>
  
 
</Layout>


<script>
import { app } from "../lib/firebase/client";
import { getFirestore, doc, updateDoc } from "firebase/firestore";
const db = getFirestore(app)
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";

const storage = getStorage(app);
const uid=localStorage.getItem("storeId")
let file;
var newName = document.getElementById("fullname")

document.getElementById("photo").addEventListener('change', ()=>{
  file = document.getElementById("photo").files[0]
  console.log(file)
  document.getElementById("demo").classList.remove('hidden')
  document.getElementById("demo").src= URL.createObjectURL(file)
})
document.getElementById("demo").classList.add('hidden')
document.getElementById("toast").classList.add('hidden')

//Save Changes 

document.getElementById("save").addEventListener('click', async ()=>{
document.getElementById("toast").classList.remove('hidden')
const storageRef = ref(storage, '/images/' + file.name);
const uploadTask = uploadBytesResumable(storageRef, file);

// Listen for state changes, errors, and completion of the upload.
uploadTask.on('state_changed',
  (snapshot) => {
    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
    console.log('Upload is ' + progress + '% done');
    switch (snapshot.state) {
      case 'paused':
        console.log('Upload is paused');
        break;
      case 'running':
        console.log('Upload is running');
        break;
    }
  }, 
  (error) => {
    // A full list of error codes is available at
    // https://firebase.google.com/docs/storage/web/handle-errors
    switch (error.code) {
      case 'storage/unauthorized':
        // User doesn't have permission to access the object
        break;
      case 'storage/canceled':
        // User canceled the upload
        break;

      // ...

      case 'storage/unknown':
        // Unknown error occurred, inspect error.serverResponse
        break;
    }
  }, 
  () => {
    // Upload completed successfully, now we can get the download URL
    getDownloadURL(uploadTask.snapshot.ref).then( async (downloadURL) => {
      const profilePicRef = doc(db, "users", uid );
      await updateDoc(profilePicRef, {
      picture: downloadURL,
      name: newName.value
});
     window.location.href="/dashboard"
    });
  }
); 


})

</script>
