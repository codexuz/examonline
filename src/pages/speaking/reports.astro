---
import Layout from "@layouts/Layout.astro";
import { app } from "@lib/firebase/server";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
import Report from '@components/Report.astro'
import { createClient } from "@deepgram/sdk";


const auth = getAuth(app);
const db = getFirestore(app)

/* Check current session */
if (!Astro.cookies.has("session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("session").value;
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/signin");
}


const userRef = db.collection("users").doc(user.uid)
const userSnapshot = await userRef.get();
const userData = userSnapshot.data();

const {telegram, telegramName, audio, submitTime, textNo, feedback} = userData

/*
const deepgram = createClient("7e152e9866bbc69d6487e1bea4b6c250aeeab7ca");

if(!feedback){

const { result, error } = await deepgram.listen.prerecorded.transcribeUrl(
  {
    url:  audio
  },
  {
    model: "nova",
    punctuate:true
  }
  
);

if (error) {
  console.error(error);
}

const text= result.results.channels[0].alternatives[0].transcript
if(text==="" || text===null){
    return new Response('You did not provide any responses')
}

userRef.update({
    transcript: text,
  }).then(() => {
    console.log("transcript saved");
  }).catch((error) => {
    console.error("Error saving transcript:", error);
  });

}
else{
   console.log('Feedback saqlangan')
}

*/
---
<Layout title="Speaking Report">
   <header class="bg-gray-900 w-full sticky top-0 flex items-center justify-between" style="z-index:999">

   <a onclick="window.location.href='/speaking/speaking-mock'"  class="bg-gray-900 rounded-lg flex justify-center items-center  text-white m-4">
 
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
      </svg>
   Back to Topics
   </a>

      <div class="flex items-center my-3">
         <span class="text-white bg-blue-600 rounded-full font-semibold py-1 px-5 mx-2">{telegramName || telegram}</span>
      </div>
   </header>
   <Report
   audioUrl={audio}
   examName={textNo}
   examDate={submitTime}
   telegram={telegram || "Siz hali speaking topshirmagansiz"}
   />
</Layout>

<script>
/*
import { app } from "@lib/firebase/client";
import { getFirestore, doc, updateDoc, getDoc} from "firebase/firestore";

const db = getFirestore(app)
const uid=localStorage.getItem("storeId")

const docRef = doc(db, "users", uid);
const docSnap = await getDoc(docRef);
const res=docSnap.data()
const {transcript, feedback} = res



if(!feedback && transcript){
 $('#loader').removeClass('hidden')
const response = await fetch('https://examonline-rouge.vercel.app/api/report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({transcript}),
      });

      const feedback = await response.json();
      await updateDoc(docRef, {
      feedback: feedback,
      javob: {audio: "audio", text: "text"}
      }).then(() => {
      $('#loader').addClass('hidden')
      $('#feedback').removeClass('hidden')
      $('#feedback').html(feedback)
    }).catch((error) => {
    console.error("Error saving transcript:", error);
  });
}

*/
</script>
