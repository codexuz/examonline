---
import Layout from "@layouts/Layout.astro";
import Header from '@components/report/Header.astro'

---
<Layout title="Speaking Report">
  
  <Header
  link="window.location.href='/dashboard/index.html'"
  />

<main class="my-4 pt-6">
  <ul class="container grid grid-cols-1 gap-3 mx-auto px-5 " id="report-list">

  </ul>
  </main>

</Layout>

<script>
  import { db } from "@lib/firebase/client";
import { doc, getDocs, collection, onSnapshot, deleteDoc } from "firebase/firestore";

var user = JSON.parse(localStorage.getItem('user'));

function generateReportLink(reportId) {
  return `/speaking/reports/details?id=${reportId}`;
}




function fetchReportsAndUpdateLocalStorage() {
  let reports = [];

  const docRef = doc(db, "users", user.uid);
  const reportsCollectionRef = collection(docRef, 'report');

  getDocs(reportsCollectionRef)
    .then((querySnapshot) => {
      querySnapshot.forEach((doc) => {
        var answers = {
          id: doc.id,
          data: doc.data()
        };

        reports.push(answers);
      });

      localStorage.setItem('reports', JSON.stringify(reports));

      renderReports(reports);
    })
    .catch((error) => {
      console.error("Error getting documents: ", error);
    });
}


function deleteAnswer(reportId) {
  let val = confirm("Javobingizni o'chirasizmi?")
  if(val){
    
  const docRef = doc(db, "users", user.uid, "report", reportId);
  deleteDoc(docRef)
    .then(() => {
      console.log("Document successfully deleted!");
      window.location.reload()
    })
    .catch((error) => {
      console.error("Error deleting document: ", error);
    });
  }
}

function renderReports(reports) {
  let data = "";
  reports.forEach((report) => {
    const link = generateReportLink(report.id);
    data += `
    <div class="flex items-center gap-x-2 container">
      <a class="flex w-full justify-between items-center p-2  bg-blue-600 text-white rounded-2xl" data-astro-reload href="${link}">
      <div class="mx-2 w-[150px]">
        <p class="truncate overflow-hidden"><small>${report.data.submitTime}</small></p>
        <p class="text-sm truncate overflow-hidden">${report.data.textNo}</p>
      </div>
      <svg xmlns="http://www.w3.org/2000/svg" class="mx-2 icon icon-tabler icon-tabler-chevron-right" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>
    </a>
    <button class="delete-btn text-white bg-rose-600 p-[10px] rounded-xl" id="${report.id}">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
      </svg>
  
    </button>
    </div>
    `
  });

  document.getElementById('report-list').innerHTML = data;

   // Attach event listeners to delete buttons
 const deleteButtons = document.querySelectorAll('.delete-btn');
  deleteButtons.forEach((button) => {
    button.addEventListener('click', (event) => {
      const reportId = event.target.getAttribute('id');
      deleteAnswer(reportId);
    });
  });
  
}






function updateReportsAndLocalStorage(reports) {
  localStorage.setItem('reports', JSON.stringify(reports));
  renderReports(reports);
}

const storedReports = localStorage.getItem('reports');
if (storedReports !== null && storedReports !== "null" && navigator.onLine) {
  renderReports(JSON.parse(storedReports));
} else {
  fetchReportsAndUpdateLocalStorage();
}

const docRef = doc(db, "users", user.uid);
const reportsCollectionRef = collection(docRef, 'report');

onSnapshot(reportsCollectionRef, (querySnapshot) => {
  let reports = [];
  querySnapshot.forEach((doc) => {
    var answers = {
      id: doc.id,
      data: doc.data()
    };
    reports.push(answers);
  });

  if (navigator.onLine) {
    updateReportsAndLocalStorage(reports);
  }
});
</script>
