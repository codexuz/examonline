---
import Layout from "@layouts/Layout.astro";
import { app } from "@lib/firebase/server";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
import Report from '@components/Report.astro'
import Header from '@components/report/Header.astro'
import { createClient } from "@deepgram/sdk";


const auth = getAuth(app);
const db = getFirestore(app)

/* Check current session */
if (!Astro.cookies.has("session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("session").value;
const decodedCookie = await auth.verifySessionCookie(sessionCookie);
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/signin");
}


interface Report {
  id: string;
  audio: string;
  feedback: string;
  submitTime: string;
  textNo: string;
  transcript:string;
  score: string;
  grammar: string;
  level: string;
  lexic: string;
  fluency: string;
  pronunciation: string;
  suggestion: string;

}

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const userRef = db.collection("users").doc(user.uid)
const userSnapshot = await userRef.get();
const userData = userSnapshot.data();

const {telegram, telegramName, audio, picture, name, email, status, balance, submitTime, textNo, feedback} = userData

const reportRef = db.collection("users").doc(user.uid).collection("report");
const reportSnapshot = await reportRef.doc(id).get()
if (!reportSnapshot.exists) {
  return Astro.redirect("/404");
}

const report = reportSnapshot.data() as Report;

const deepgram = createClient("7e152e9866bbc69d6487e1bea4b6c250aeeab7ca");

if(!report.transcript){

const { result, error } = await deepgram.listen.prerecorded.transcribeUrl(
  {
    url:  report.audio
  },
  {
    model: "nova-2-general",
    punctuate:true,
    detect_language:true
  }
  
);

if (error) {
  console.error(error);
}

const text= result.results.channels[0].alternatives[0].transcript
if(text==="" || text===null){
    return new Response('You did not provide any responses')
}

const changeRef=db.collection("users").doc(user.uid).collection("report").doc(id)
changeRef.update({
    transcript: text,
  }).then(() => {
    console.log("transcript saved");
  }).catch((error) => {
    console.error("Error saving transcript:", error);
  });

}
else{
   console.log('Feedback saqlangan')
}



---

<Layout title={report.textNo}>
<p class="hidden" id="id">{id}</p>
<p class="hidden" id="transcript">{report.transcript}</p>

   <Header
    img={picture}
    name={name}
    status={status}
    balance={balance}
    email={email}
   />
  
   <Report
   audioUrl={report.audio}
   examName={report.textNo}
   examDate={report.submitTime}
   feedback={report.feedback}
   score={report.score}
   level = {report.level}
   grammar={report.grammar}
   lexic={report.lexic}
   pronun ={report.pronunciation}
   fluency={report.fluency}
   suggestion = {report.suggestion}
   />
</Layout>

<script>
const userId = localStorage.getItem('storeId')
const uid = document.getElementById('id').innerText
const transcript = document.getElementById('transcript').innerText
import {app} from '@lib/firebase/client'
import { getFirestore , doc, getDoc, collection, updateDoc } from "firebase/firestore";

const db = getFirestore(app)

const docRef = doc(db, "users", userId);

const mainRef = doc(docRef, 'report', uid)

const docSnap = await getDoc(mainRef);

let updateRef;

if (docSnap.exists()) {
   updateRef = docSnap.data();
} else {
  // docSnap.data() will be undefined in this case
  console.log("No such document!");
}

//Show result page

if(updateRef.show === "true"){
document.getElementById('resultContainer').classList.remove('hidden')
document.getElementById('loader').classList.add('hidden')
}

//sendFeedback function

const sendFeedback = async () => {

if(updateRef.feedback){
  return
}
else{
  try {
   document.getElementById('loader').innerHTML="Javobingiz tekshirilmoqda, iltimos sahifani tark etmang!";
    const transcriptObj = { transcript }; // Convert the transcript to an object
    const res = await fetch('https://report-production-3886.up.railway.app/report', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(transcriptObj),
    });

    const data = await res.json();
    const result = JSON.parse(data)
    console.log(result)
     document.getElementById('loader').innerHTML="Javobingiz tayyor! Admin tomonidan ko'rsatilishga ruxsat kutmoqda ‚è≥"
     updateRef.feedback = result.feedback
     updateRef.score = result.overall_score
     updateRef.level = result.cefr_level
     updateRef.lexic = result.lexical_resources
     updateRef.grammar = result.grammar
     updateRef.fluency = result.fluency
     updateRef.pronunciation = result.pronunciation
     updateRef.suggestion = result.suggestion
    await updateDoc(mainRef, updateRef);

  } catch (error) {
    console.error('Error sending feedback:', error);
  }
}
};
sendFeedback()
</script>
