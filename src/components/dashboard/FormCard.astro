---
interface Props{
   name: string;
   birth: string;
   region: string;
   phone: string;

}

const {name, birth, region, phone} = Astro.props
---


<section class="rounded shadow-lg container mx-auto px-4 shadow-xl p-8">

<div class="flex lg:items-center flex-col lg:flex-row mb-5 mt-4 gap-y-2 gap-x-1 text-white border-b border-gray-700 pb-5">
    <label class="text-blue-600" for="avatar">Profil rasmi</label>
   <input id="avatar" type="file" accept="image/*">
   <button id="yuklash" class="rounded-xl py-2 px-5 bg-blue-600 text-white hover:bg-blue-700">Yuklash</button>
</div>




<main class="grid grid-cols-1 lg:grid-cols-2 gap-3 text-white">
 <div>
    <label class="text-blue-600" for="username">F.I.SH</label>
   <input  value={name} id="username" type="text" class="block w-full px-4 py-2 mt-2 rounded-md bg-gray-800 text-gray-300 border-gray-600 focus:border-blue-500 focus:border-blue-500 focus:outline-none focus:ring">
</div>

<div>
   <label class="text-blue-600" for="username">Telefon raqam</label>
   <input placeholder="+998 ___ __ __" value={phone} id="email" type="text" class="block w-full px-4 py-2 mt-2 rounded-md bg-gray-800 text-gray-300 border-gray-600 focus:border-blue-500 focus:border-blue-500 focus:outline-none focus:ring">
</div>

<div>
    <label class="text-blue-600" for="birth">Tug'ilgan sana</label>
   <input value={birth} id="birth" type="date" class="block w-full px-4 py-2 mt-2 rounded-md bg-gray-800 text-gray-300 border-gray-600 focus:border-blue-500 focus:border-blue-500 focus:outline-none focus:ring">
</div>

<div>
    <label class="text-blue-600" for="region">Yashash hududi</label>
   <input value={region} placeholder="Toshkent" id="region" type="text" class="block w-full px-4 py-2 mt-2 rounded-md bg-gray-800 text-gray-300 border-gray-600 focus:border-blue-500 focus:border-blue-500 focus:outline-none focus:ring">
</div>

</main>
</section>


<script>

import { app } from "@lib/firebase/client";
import { getFirestore, doc, updateDoc } from "firebase/firestore";
const db = getFirestore(app)
import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";

const storage = getStorage(app);
const uid=localStorage.getItem("storeId")



document.getElementById("yuklash").addEventListener('click', async ()=>{
let file = document.getElementById("avatar").files[0]
console.log(file)

//Get ref storage
const storageRef = ref(storage, '/images/' + file.name);
const uploadTask = uploadBytesResumable(storageRef, file);

// Listen for state changes, errors, and completion of the upload.
uploadTask.on('state_changed',
  (snapshot) => {
    // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
    console.log('Upload is ' + progress + '% done');
    switch (snapshot.state) {
      case 'paused':
        console.log('Upload is paused');
        break;
      case 'running':
        console.log('Upload is running');
        break;
    }
  }, 
  (error) => {
    // A full list of error codes is available at
    // https://firebase.google.com/docs/storage/web/handle-errors
    switch (error.code) {
      case 'storage/unauthorized':
        // User doesn't have permission to access the object
        break;
      case 'storage/canceled':
        // User canceled the upload
        break;

      // ...

      case 'storage/unknown':
        // Unknown error occurred, inspect error.serverResponse
        break;
    }
  }, 
  () => {
    // Upload completed successfully, now we can get the download URL
    getDownloadURL(uploadTask.snapshot.ref).then( async (downloadURL) => {
      const profilePicRef = doc(db, "users", uid );
      await updateDoc(profilePicRef, {
      picture: downloadURL
});
     window.location.reload()
    });
  }
); 


})

</script>